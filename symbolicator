#!/usr/bin/ruby

# Reference:
#  https://developer.apple.com/documentation/xcode/adding-identifiable-symbol-names-to-a-crash-report

require 'open3'

$config = {
    :crashlog => "",
    :xcarchive => nil,
    :only_crashed_thread => false,
    :auto_symbolicate => false,
    :no_system_libs => false,
    :verbose => false,
    :help => false
}

callstacks = []
binary_image_to_frame_list = {}
binary_images = []
os_version = nil
system_architecture = nil
triggering_thread = nil
$system_symbols_path = nil

def format_uuid( raw_uuid )
    part1 = raw_uuid[0..7].upcase
    part2 = raw_uuid[8..11].upcase
    part3 = raw_uuid[12..15].upcase
    part4 = raw_uuid[16..19].upcase
    part5 = raw_uuid[20..31].upcase

    return (part1 + "-" + part2 + "-" + part3 + "-" + part4 + "-" + part5)
end

def update_dSYM_for_system_lib( binary_image )
    if( $config[:no_system_libs] || $system_symbols_path == nil )
        return
    end

    candidate = File.join( $system_symbols_path, binary_image[:path_on_device])
    if( File.exist?( candidate ) )
        binary_image[:dsym_file] = candidate
    end
end

def select_dSYM_for_binary( xcarchive_dir, binary_name, uuid )
    options = Dir.glob( xcarchive_dir + "/dSYMs/*" ).select { |e| e.match(/.*\/dSYMs\/#{binary_name}.*\.dSYM/) }
    options.each do |option|
        if File::exist?(option + "/Contents/Resources/DWARF/#{binary_name}") then
            output, state = Open3.capture2( "dwarfdump -uuid \"#{option}\"" )
            if output.match(/#{uuid}/) then
                return option
            end
        end
    end
    return nil
 end

def update_dSYM_for_binary_image( binary_image, preferred_xcarchive )

    if binary_image[:dsym_file_lookup_done] then
        return
    end

    if( !binary_image[:included_in_bundle] ) # it's a system lib
        update_dSYM_for_system_lib(binary_image)
        binary_image[:dsym_file_lookup_done] = true
        return
    end

    if preferred_xcarchive == nil then
        options, status = Open3.capture2( "mdfind \"com_apple_xcode_dsym_uuids == #{binary_image[:uuid]}\"" )
    else
        options = preferred_xcarchive
    end

    success = false
    options.split("\n").each do |option|
        result = select_dSYM_for_binary( option, binary_image[:binary_name], binary_image[:uuid] )
        if result != nil then
            binary_image[:dsym_file] = result
            success = true

            bcsymbolmap_file = option + "/BCSymbolMaps/#{binary_image[:uuid]}.bcsymbolmap"
            if File.exist?( bcsymbolmap_file ) then
                binary_image[:bcsymbolmap] = bcsymbolmap_file

                if $config[:auto_symbolicate] then
                    Open3.capture2( "dsymutil -symbol-map \"#{bcsymbolmap_file}\" \"#{result}\"" )
                end
            end

            break
        end
    end

    if !success && preferred_xcarchive != nil then
        update_dSYM_for_binary_image( binary_image, nil ) # retry with spotlight search
    end

    binary_image[:dsym_file_lookup_done] = true
end

def find_system_symbols_path( os_version )
    device_support_dir_name = nil
    if ( os_version[:name].include?( "iPhone OS" ) )
        device_support_dir_name = "iOS DeviceSupport"
    else
        print( "OS version not supported yet: #{ os_version[:name] }" );
    end

    xcode_data_path = File.join( Dir.home, "Library", "Developer", "Xcode", device_support_dir_name )
    if !Dir.exist?( xcode_data_path )
        print( "Xcode data path cannot be found: #{xcode_data_path}\n" )
        return nil
    end

    options = Dir.glob( File.join( xcode_data_path, "*" ) ).select { |e| e.match(/.*#{os_version[:id]}.*/) }
    options.each do |option|
        candidate = File.join( option, "Symbols" )
        if( Dir.exist?( candidate ) )
            return candidate
        end
    end
    return nil
end

def run_atos_for_binary_image( binary_image, frame_list )
    if( binary_image[:atos_executed] )
        return
    end

    if binary_image[:dsym_file] != nil then
        dsym_loc = binary_image[ :dsym_file ]
        arch = binary_image[:arch]
        binary_name = binary_image[:binary_name]

        addresses = []
        frame_list.each { |frame|
            addresses.append( frame[:address] )
        }
        addresses_str = addresses.join( " " )
        atos_command = "atos -arch #{arch} -o \"#{dsym_loc}\" -l #{binary_image[:load_address]}  #{ addresses_str }"
        # print( "ATOS COMMAND: [#{atos_command}]\n" )
        
        resolved, status = Open3.capture2( atos_command )
        resolved_strs = resolved.split( "\n" )

        frame_list.each_with_index { |frame, idx|
            frame[:resolved_str] = "  #{ "%5d" % frame[:frame_num] } #{ "%30s" % binary_image[:binary_name] }    #{resolved_strs[idx].strip}"
        }
    end

    binary_image[:atos_executed] = true
end

def print_help()
    print( "
Usage:
  $ #{$PROGRAM_NAME} crashlog_file_path [options]

  Options:
      -x <xcarchive-path>     : Prefer dSYM and BCSymbolMap files from this archive.
      -a, --auto-symbolicate  : Automatically symbolicate dSYMs if
                                the corresponding BCSymbolMap files can be found.
      -c, --only-crashed      : Show the callstack of the crashed thread only.
      -n, --no-system-libs    : Don't resolve frames for binaries that are
                                not part of the application bundle.
      -v, --verbose           : Print additional info (for now, the configuration)
      -h, --help              : Show this message.
" )
end

def parse_arguments( argv )

    if argv.size < 1 then
        puts( "No argument(s) given!" )
        return false
    end

    if argv[0] == "-h" || argv[0] == "--help" then
        $config[:help] = true
        return true
    end

    if !File.readable?( argv[0] ) then
        print( "Input file [#{argv[0]}] is not readable!\n" )
        return false
    end
    $config[:crashlog] = argv[0]

    idx = 1
    while idx < argv.size() do
        if argv[idx] == "-c" || argv[idx] == "--only-crashed" then
            $config[:only_crashed_thread] = true
            idx += 1
        elsif argv[idx] == "-h" || argv[idx] == "--help" then
            $config[:help] = true
            idx += 1
        elsif argv[idx] == "-a" || argv[idx] == "--auto-symbolicate" then
            $config[:auto_symbolicate] = true
            idx += 1
        elsif argv[idx] == "-n" || argv[idx] == "--no-system-libs" then
            $config[:no_system_libs] = true
            idx += 1
        elsif argv[idx] == "-v" || argv[idx] == "--verbose" then
            $config[:verbose] = true
            idx += 1
        elsif argv[idx] == "-x" then
            possible_path = ( idx + 1 ) < argv.size() ? argv[ idx + 1 ] : ""
            if !possible_path.empty? then
                if Dir.exist?( possible_path ) then
                    $config[:xcarchive] = possible_path
                else
                    print( "Xcarchive path cannot be found: #{ possible_path }\n" )
                    return false
                end
            else
                print( "Option '-x' needs an additional argument\n" )
                return false
            end
            idx += 2
        else
            print( "Unrecognized option: #{argv[idx]}\n" )
            idx += 1
        end
    end
    return true
end

if !parse_arguments( ARGV ) then
    print_help()
    exit 1
end

if $config[:verbose] then
    $config.each { |key, value|
        print( "#{key} : #{value}\n" );
    }
    puts( "" )
end

if $config[:help] then
    print_help()
    exit 0
end

# Thread 0 Crashed:
# Thread 1:
thread_callstack_header_pattern = /^Thread\s+(?<thread_num>\d+)(?<extra>\sCrashed)?:$/

# 5   Molecules_TBari_ed            	0x000000010134455c 0x101324000 + 132444
callstack_frame_pattern = /^(?<frame_num>\d+)\s+(?<binary_name>[\w\.]+)\s+(?<address>0x\h+)\s+(?<load_address>0x\h+)\s\+\s(?<offset>\d+)/

# Binary Images:
binary_images_start_pattern = /Binary\sImages:/

# 0x101324000 - 0x1014cbfff Molecules_TBari_ed arm64  <4c5eff7bc4d63c5a85917d0a5f39401b> /var/containers/Bundle/Application/6F4DBCC8-B5F0-4F96-B5AB-4282458D0B25/Molecules_TBari_ed.app/Molecules_TBari_ed
binary_image_info_pattern = /^(?<load_address>0x\h+)\s-\s0x\h+\s(?<binary_name>[^\s]+)\s(?<arch>[^\s]+)\s+<(?<uuid>\h{32})>\s+(?<path_on_device>.*)/

# Code Type:           ARM-64 (Native)
system_architecture_pattern = /^Code Type:\s+(?<arch_name>\S+)\s*.*/

# OS Version:          iPhone OS 12.5.6 (16H71)
os_version_pattern = /^OS Version:\s+(?<name>.+)\s+\((?<id>\S+)\)/

# Triggered by Thread:  0
triggering_thread_pattern = /^Triggered by Thread:\s+(?<thread_num>\d+)/

# States:
# :Unkown
# :InThreadCallstack
# :InBinaryImageList
state = :Unkown
crashlog = File.readlines( $config[:crashlog] ).each do | line |

    if( state == :InThreadCallstack ) then
        matched = false
        line.match(callstack_frame_pattern) { |matches|
            matched = true

            binary_name = matches[:binary_name]
            callstacks.last[:frames].append(
                {   :frame_num => matches[:frame_num].to_i,
                    :binary_name => binary_name,
                    :address => matches[:address],
                    :load_address => matches[:load_address],
                    :offset => matches[:offset],
                    :resolved_str => nil
                }
            )

            if( binary_image_to_frame_list.key?( binary_name) )
                binary_image_to_frame_list[matches[:binary_name]].append( callstacks.last[:frames].last )
            else
                binary_image_to_frame_list[matches[:binary_name]] = [ callstacks.last[:frames].last ]
            end
        }

        if !matched then
            state = :Unkown
        end
    end

    if( state == :InBinaryImageList ) then
        matched = false
        line.match(binary_image_info_pattern) { |matches|
            matched = true
            binary_images.append(
                {   :load_address => matches[:load_address],
                    :binary_name => matches[:binary_name],
                    :arch => matches[:arch],
                    :uuid => format_uuid( matches[:uuid] ),
                    :path_on_device => matches[:path_on_device],
                    :included_in_bundle => matches[:path_on_device].start_with?( "/var/containers" ),
                    :dsym_file => nil,
                    :dsym_file_lookup_done => false,
                    :bcsymbolmap => nil,
                    :atos_executed => false
                }
            )
        }

        if !matched then
            state = :Unkown
        end
    end

    if( state == :Unkown) then
        matched = false

        if ( os_version == nil )
            line.match(os_version_pattern) { |matches|
                matched = true
                os_version = {
                    :name => matches[:name],
                    :id => matches[:id]
                }
                print( "OS version: #{os_version[:name]}, #{os_version[:id]}\n" )
            }
        end

        if ( system_architecture == nil )
            line.match(system_architecture_pattern) { |matches|
                matched = true
                system_architecture = matches[:arch_name]
                print( "Architecture: #{system_architecture}\n" )
            }
        end

        if ( triggering_thread == nil )
            line.match(triggering_thread_pattern) { |matches|
                matched = true
                triggering_thread = matches[:thread_num]
                print( "Triggering thread: #{triggering_thread}\n" )
            }
        end

        if ( os_version != nil && $system_symbols_path == nil )
            $system_symbols_path = find_system_symbols_path( os_version )
        end

        if !matched
            line.match(thread_callstack_header_pattern) { |matches|
                matched = true
                callstacks.append(
                    {   :thread_num => matches[:thread_num].to_i,
                        :crashed => matches[:extra].to_s.end_with?( "Crashed" ),
                        :frames => []
                    }
                )
                state = :InThreadCallstack
            }
        end

        if !matched then
            matched = false
            line.match(binary_images_start_pattern) { |matches|
                matched = true
                state = :InBinaryImageList
            }

            if !matched then
                state = :Unkown
            end
        end
    end
end

load_address_to_binary_image = {}
binary_images.each do | image |
    load_address_to_binary_image[ image[:load_address] ] = image
end

callstacks.each do | thread |
    if !thread[:crashed] && $config[:only_crashed_thread] then
        next
    end

    print( "\nThread #{thread[:thread_num]} #{thread[:crashed] ? "(crashed)" : ""}\n" )
    thread[:frames].each do | frame |
        binary_image = load_address_to_binary_image[ frame[:load_address] ]
        update_dSYM_for_binary_image( binary_image, $config[:xcarchive] )
        binary_name = binary_image[:binary_name]
        run_atos_for_binary_image( binary_image, binary_image_to_frame_list[ binary_name ] )
        if frame[:resolved_str] == nil then
            print( "  #{ "%5d" % frame[:frame_num] } #{ "%30s" % binary_image[:binary_name] }    #{frame[:address]} = #{frame[:load_address]} + #{frame[:offset]}\n" )
        else
            print( "#{ frame[:resolved_str] }\n" )
        end
    end
end
